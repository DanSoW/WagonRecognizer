package com.server.database;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Repository;

@Repository
public class DataElementDaoImpl implements DataElementDao {
	
	//Database name
	private static final String NAME_DATABASE = "WagonRecognize";

	//Table names
	private static final String NAME_WAGONS_TABLE = "Wagons";
	private static final String NAME_INVOICES_TABLE = "Invoices";
	private static final String NAME_REGISTER_TABLE = "Register";
	
	//Attributes of the wagons table
	public static final String NAME_ATTRIBUT_NUMBER_WAGON = "numberWagon";
	public static final String NAME_ATTRIBUT_ARRIVAL_DATE = "arrivalDate";
	public static final String NAME_ATTRIBUT_IMAGE_PATH = "imagePath";
	public static final String NAME_ATTRIBUT_LEVEL_CORRECT = "levelCorrectRecognize";
	
	//Attributes of the invoices table
	public static final String NAME_ATTRIBUT_NUMBER_INVOICES = "numberInvoices";
	public static final String NAME_ATTRIBUT_NAME_SUPPLIER = "nameSupplier";
	public static final String NAME_ATTRIBUT_TOTAL_WAGONS = "totalWagons";
	public static final String NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE = "arrivalTrainDate";
	public static final String NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE = "departureTrainDate";
	
	//Attributes of the register table
	public static final String NAME_ATTRIBUT_ID = "id";
	public static final String NAME_ATTRIBUT_REF_NUMBER_INVOICE = "refNumberInvoice";
	public static final String NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON = "thisNumberWagon";
	public static final String NAME_ATTRIBUT_ARRIVAL_MARK = "arrivalMark";
	public static final String NAME_ATTRIBUT_SERIAL_NUMBER = "serialNumber";
	public static final String NAME_ATTRIBUT_ACTUAL_SERIAL_NUMBER = "actualSerialNumber";
	public static final String NAME_ATTRIBUT_SD = "sD";
	
	//***************************************************
	//Queries to the table in the format of SQL commands:
	
	
	//SQL commands for the wagons table
	private static final String SQL_GET_DATA_BY_NUMBER_WAGONS = 
			"SELECT * FROM " + NAME_WAGONS_TABLE + " WHERE " + NAME_ATTRIBUT_NUMBER_WAGON + " = :" + NAME_ATTRIBUT_NUMBER_WAGON;
	private static final String SQL_INSERT_DATA_WAGONS =
			"INSERT INTO " + NAME_WAGONS_TABLE + " (" 
	+ NAME_ATTRIBUT_NUMBER_WAGON + ", "
	+ NAME_ATTRIBUT_ARRIVAL_DATE + ", "
	+ NAME_ATTRIBUT_IMAGE_PATH + ", "
	+ NAME_ATTRIBUT_LEVEL_CORRECT + ") "
	+ "VALUES ("
	+ ":" + NAME_ATTRIBUT_NUMBER_WAGON + ", "
	+ ":" + NAME_ATTRIBUT_ARRIVAL_DATE + ", "
	+ ":" + NAME_ATTRIBUT_IMAGE_PATH + ", "
	+ ":" + NAME_ATTRIBUT_LEVEL_CORRECT + ")";
	private static final String SQL_SELECT_WAGONS = "SELECT * FROM " + NAME_WAGONS_TABLE + ";";
	
	private static final String SQL_CREATE_TABLE_WAGONS = "CREATE TABLE IF NOT EXISTS " + NAME_WAGONS_TABLE + " ( " +
	NAME_ATTRIBUT_NUMBER_WAGON + " INT PRIMARY KEY, " +
    NAME_ATTRIBUT_ARRIVAL_DATE + " DATE, " +
	NAME_ATTRIBUT_IMAGE_PATH + " VARCHAR(255), " + 
    NAME_ATTRIBUT_LEVEL_CORRECT + " DOUBLE);";
	
	private static final String SQL_UPDATE_TABLE_WAGONS = "UPDATE " + NAME_WAGONS_TABLE
			+ " SET " + NAME_ATTRIBUT_ARRIVAL_DATE + "=:" + NAME_ATTRIBUT_ARRIVAL_DATE
			+ ", " + NAME_ATTRIBUT_IMAGE_PATH + "=:" + NAME_ATTRIBUT_IMAGE_PATH
			+ ", " + NAME_ATTRIBUT_LEVEL_CORRECT + "=:" + NAME_ATTRIBUT_LEVEL_CORRECT
			+ " WHERE " + NAME_ATTRIBUT_NUMBER_WAGON + "=:" + NAME_ATTRIBUT_NUMBER_WAGON
			+ ";";
	
	private static final String SQL_DELETE_RECORD_WAGONS = "DELETE FROM " + NAME_WAGONS_TABLE + " WHERE "
			+ NAME_ATTRIBUT_NUMBER_WAGON + "=:" + NAME_ATTRIBUT_NUMBER_WAGON + ";";
	
	//SQL commands for the invoices table
	private static final String SQL_GET_DATA_BY_NUMBER_INVOICES = 
			"SELECT * FROM " + NAME_INVOICES_TABLE + " WHERE " + NAME_ATTRIBUT_NUMBER_INVOICES + " = :" + NAME_ATTRIBUT_NUMBER_INVOICES;
	private static final String SQL_INSERT_DATA_INVOICES =
			"INSERT INTO " + NAME_INVOICES_TABLE + " (" 
	+ NAME_ATTRIBUT_NUMBER_INVOICES + ", "
	+ NAME_ATTRIBUT_NAME_SUPPLIER + ", "
	+ NAME_ATTRIBUT_TOTAL_WAGONS + ", "
	+ NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE + ", "
	+ NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE + ") "
	+ "VALUES ("
	+ ":" + NAME_ATTRIBUT_NUMBER_INVOICES + ", "
	+ ":" + NAME_ATTRIBUT_NAME_SUPPLIER + ", "
	+ ":" + NAME_ATTRIBUT_TOTAL_WAGONS + ", "
	+ ":" + NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE + ", "
	+ ":" + NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE + ")";
	
	private static final String SQL_CREATE_TABLE_INVOICES = "CREATE TABLE IF NOT EXISTS " + NAME_INVOICES_TABLE + " ( " +
			NAME_ATTRIBUT_NUMBER_INVOICES + " VARCHAR(20) PRIMARY KEY, " +
			NAME_ATTRIBUT_NAME_SUPPLIER + " NVARCHAR(100), " +
			NAME_ATTRIBUT_TOTAL_WAGONS + " SMALLINT, " + 
			NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE + " DATE, " + 
			NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE + " DATE);";
	
	private static final String SQL_SELECT_INVOICES = "SELECT * FROM " + NAME_INVOICES_TABLE + ";";
	
	private static final String SQL_UPDATE_TABLE_INVOICES = "UPDATE " + NAME_INVOICES_TABLE
			+ " SET " + NAME_ATTRIBUT_NAME_SUPPLIER + "=:" + NAME_ATTRIBUT_NAME_SUPPLIER
			+ ", " + NAME_ATTRIBUT_TOTAL_WAGONS + "=:" + NAME_ATTRIBUT_TOTAL_WAGONS
			+ ", " + NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE + "=:" + NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE
			+ ", " + NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE + "=:" + NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE
			+ " WHERE " + NAME_ATTRIBUT_NUMBER_INVOICES + "=:" + NAME_ATTRIBUT_NUMBER_INVOICES
			+ ";";
	
	private static final String SQL_DELETE_RECORD_INVOICES = "DELETE FROM " + NAME_INVOICES_TABLE + " WHERE "
			+ NAME_ATTRIBUT_NUMBER_INVOICES + "=:" + NAME_ATTRIBUT_NUMBER_INVOICES + ";";
	
	//SQL commands for the register table
	private static final String SQL_GET_DATA_BY_ID_REGISTER = 
			"SELECT * FROM " + NAME_REGISTER_TABLE + " WHERE " + NAME_ATTRIBUT_REF_NUMBER_INVOICE + " = :" + NAME_ATTRIBUT_REF_NUMBER_INVOICE
			+ " AND " + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + "=:" + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + ";";
	
	private static final String SQL_INSERT_DATA_REGISTER =
			"INSERT INTO " + NAME_REGISTER_TABLE + " (" 
	+ NAME_ATTRIBUT_REF_NUMBER_INVOICE + ", "
	+ NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + ", "
	+ NAME_ATTRIBUT_ARRIVAL_MARK + ", "
	+ NAME_ATTRIBUT_SERIAL_NUMBER + ", "
	+ NAME_ATTRIBUT_ACTUAL_SERIAL_NUMBER + ", "
	+ NAME_ATTRIBUT_SD + ") "
	+ "VALUES ("
	+ ":" + NAME_ATTRIBUT_REF_NUMBER_INVOICE + ", "
	+ ":" + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + ", "
	+ "FALSE, "
	+ ":" + NAME_ATTRIBUT_SERIAL_NUMBER 
	+ "NULL, " 
	+ ":" + NAME_ATTRIBUT_SD + ");";
	private static final String SQL_SELECT_REGISTER = "SELECT * FROM " + NAME_REGISTER_TABLE + ";";
	
	private static final String SQL_CREATE_TABLE_REGISTER = "CREATE TABLE IF NOT EXISTS " + NAME_REGISTER_TABLE + " (" +
	NAME_ATTRIBUT_ID + " INT NOT NULL PRIMARY KEY AUTOINCREMENT, " +
    NAME_ATTRIBUT_REF_NUMBER_INVOICE + " VARCHAR(20) NOT NULLL UNIQUE, " +
    NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + " INT NOT NULL, " +
	NAME_ATTRIBUT_ARRIVAL_MARK + " BOOLEAN NOT NULL, " + 
    NAME_ATTRIBUT_SERIAL_NUMBER + " SHORT NOT NULL, " +
	NAME_ATTRIBUT_ACTUAL_SERIAL_NUMBER + " SHORT NULL, " +
    NAME_ATTRIBUT_SD + " FLOAT NOT NULL, " +
	"FOREIGN KEY (" + NAME_ATTRIBUT_REF_NUMBER_INVOICE + ") " +
    "REFERENCES " + NAME_INVOICES_TABLE + " (" + NAME_ATTRIBUT_NUMBER_INVOICES + ");"
	;
	
	/*private static final String SQL_UPDATE_TABLE_REGISTER = "UPDATE " + NAME_WAGONS_TABLE
			+ " SET " + NAME_ATTRIBUT_ARRIVAL_DATE + "=:" + NAME_ATTRIBUT_ARRIVAL_DATE
			+ ", " + NAME_ATTRIBUT_IMAGE_PATH + "=:" + NAME_ATTRIBUT_IMAGE_PATH
			+ ", " + NAME_ATTRIBUT_LEVEL_CORRECT + "=:" + NAME_ATTRIBUT_LEVEL_CORRECT
			+ " WHERE " + NAME_ATTRIBUT_NUMBER_WAGON + "=:" + NAME_ATTRIBUT_NUMBER_WAGON
			+ ";";*/
	
	private static final String SQL_DELETE_RECORD_REGISTER = "DELETE FROM " + NAME_REGISTER_TABLE + " WHERE "
			+ NAME_ATTRIBUT_REF_NUMBER_INVOICE + "=:" + NAME_ATTRIBUT_REF_NUMBER_INVOICE + " AND "
			+ NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + "=:" + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + ";";
	
	
	//Stored procedures for the wagons table
	private static final String NAME_STORED_PROCEDURE_INSERT_WAGONS = "insertWagons";
	private static final String NAME_ATTRIBUT_OUT_FOR_WAGONS = "outData";
	private static final String SQL_CREATE_INSERT_STORED_PROCEDURE_WAGONS = 
			"DROP PROCEDURE IF EXISTS " + NAME_DATABASE + "." + NAME_STORED_PROCEDURE_INSERT_WAGONS + ";\n" +
			"CREATE PROCEDURE " + NAME_DATABASE + "." + NAME_STORED_PROCEDURE_INSERT_WAGONS +
			"( IN " + NAME_ATTRIBUT_NUMBER_WAGON + " INT, " +
			"IN " + NAME_ATTRIBUT_ARRIVAL_DATE + " DATE, " +
			"IN " + NAME_ATTRIBUT_IMAGE_PATH + " VARCHAR(255), " +
			"IN " + NAME_ATTRIBUT_LEVEL_CORRECT + " DOUBLE, " +
			"OUT " + NAME_ATTRIBUT_OUT_FOR_WAGONS + " INT) BEGIN " + 
			"IF(EXISTS(SELECT * FROM " + NAME_WAGONS_TABLE + " WHERE " +
			NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_NUMBER_WAGON + "=" + NAME_ATTRIBUT_NUMBER_WAGON + ")) BEGIN " +
			NAME_ATTRIBUT_OUT_FOR_WAGONS + "=(-1);" + "RETURN; END; " +
			"IF(EXISTS(SELECT * FROM " + NAME_WAGONS_TABLE + " WHERE " +
			NAME_WAGONS_TABLE + "." + NAME_ATTRIBUT_IMAGE_PATH + "=" + NAME_ATTRIBUT_IMAGE_PATH + ")) BEGIN " +
			NAME_ATTRIBUT_OUT_FOR_WAGONS + "=(-2); RETURN; END; " +
			"INSERT INTO " + NAME_WAGONS_TABLE + " (" +
			NAME_WAGONS_TABLE + "." + NAME_ATTRIBUT_NUMBER_WAGON + ", " +
			NAME_WAGONS_TABLE + "." + NAME_ATTRIBUT_ARRIVAL_DATE + ", " +
			NAME_WAGONS_TABLE + "." + NAME_ATTRIBUT_IMAGE_PATH + ", " +
			NAME_WAGONS_TABLE + "." + NAME_ATTRIBUT_LEVEL_CORRECT + ") VALUES (" +
			NAME_ATTRIBUT_NUMBER_WAGON + ", " + NAME_ATTRIBUT_ARRIVAL_DATE + ", " + 
			NAME_ATTRIBUT_IMAGE_PATH + ", " + NAME_ATTRIBUT_LEVEL_CORRECT + ");"
			+ " " + NAME_ATTRIBUT_OUT_FOR_WAGONS + "=0; END";
	
	//Stored procedures for the register table
	private static final String NAME_STORED_PROCEDURE_INSERT_REGISTER = "insertRegister";
	private static final String NAME_ATTRIBUT_OUT_FOR_REGISTER = "outData";
	private static final String SQL_CREATE_INSERT_STORED_PROCEDURE_REGISTER = 
			"DROP PROCEDURE IF EXISTS " + NAME_DATABASE + "." + NAME_STORED_PROCEDURE_INSERT_REGISTER + ";\n" +
			"CREATE PROCEDURE " + NAME_DATABASE + "." + NAME_STORED_PROCEDURE_INSERT_REGISTER +
			"( IN " + NAME_ATTRIBUT_REF_NUMBER_INVOICE + " VARCHAR(20), " +
			"IN " + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + " INT, " +
			"IN " + NAME_ATTRIBUT_SERIAL_NUMBER + " SMALLINT, " +
			"IN " + NAME_ATTRIBUT_SD + " FLOAT, " +
			"OUT " + NAME_ATTRIBUT_OUT_FOR_REGISTER + " INT) BEGIN " +
			"IF(EXISTS(SELECT * FROM " + NAME_REGISTER_TABLE + " WHERE " + NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_REF_NUMBER_INVOICE + "=" + NAME_ATTRIBUT_REF_NUMBER_INVOICE
			+ " AND " + NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + "=" + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + "))"
			+ "BEGIN " + NAME_ATTRIBUT_OUT_FOR_REGISTER + "=(-1); RETURN; END; " + 
			"IF(EXISTS(SELECT * FROM " + NAME_REGISTER_TABLE + " WHERE " +  NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON +
			"=" + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + " AND " + NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_SERIAL_NUMBER + "="
			+ NAME_ATTRIBUT_SERIAL_NUMBER + ")) BEGIN " + NAME_ATTRIBUT_OUT_FOR_REGISTER + "=(-2); RETURN; END; " +
			"IF(" + NAME_ATTRIBUT_SERIAL_NUMBER + "<=0 OR " + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + " <= 0)"
			+ "BEGIN " + NAME_ATTRIBUT_OUT_FOR_REGISTER + "=(-3); RETURN; END; " + 
			"INSERT INTO " + NAME_REGISTER_TABLE + " (" 
			+ NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_REF_NUMBER_INVOICE + ", "
			+ NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + ", "
			+ NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_ARRIVAL_MARK + ", "
			+ NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_SERIAL_NUMBER + ", "
			+ NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_ACTUAL_SERIAL_NUMBER + ", "
			+ NAME_REGISTER_TABLE + "." + NAME_ATTRIBUT_SD + ") "
			+ "VALUES (" + NAME_ATTRIBUT_REF_NUMBER_INVOICE + ", " + NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON + ", " + "FALSE, " +
			NAME_ATTRIBUT_SERIAL_NUMBER + ", NULL, " + NAME_ATTRIBUT_SD + "); "
			+ NAME_ATTRIBUT_OUT_FOR_REGISTER + "=0; END";
			
	
	private final DataElementMapperWagons dataMapperWagons;
	private final DataElementMapperInvoices dataMapperInvoices;
	private final DataElementMapperRegister dataMapperRegister;
	
	private final NamedParameterJdbcTemplate jdbcTemplate;
	private final DataSource dataSource;
	
	@Autowired
	public DataElementDaoImpl(
			DataSource dSource,
			DataElementMapperWagons dMapperWagons,
			DataElementMapperInvoices dMapperInvoices,
			DataElementMapperRegister dMapperRegister,
			NamedParameterJdbcTemplate jTempl
			) {
		this.dataSource = dSource;
		this.dataMapperWagons = dMapperWagons;
		this.dataMapperInvoices = dMapperInvoices;
		this.dataMapperRegister = dMapperRegister;
		this.jdbcTemplate = jTempl;
		
		//Create table wagons
		this.jdbcTemplate.execute(SQL_CREATE_TABLE_WAGONS, new PreparedStatementCallback<Object>() {
			@Override
			public Object doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
				ps.execute();
				return null;
			}
		});
		
		//Create table invoices
		this.jdbcTemplate.execute(SQL_CREATE_TABLE_INVOICES, new PreparedStatementCallback<Object>() {
			@Override
			public Object doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
				ps.execute();
				return null;
			}
		});
		
		//Create table register
		this.jdbcTemplate.execute(SQL_CREATE_TABLE_REGISTER, new PreparedStatementCallback<Object>() {
			@Override
			public Object doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
				ps.execute();
				return null;
			}
		});
		
		//Create stored procedures
		this.jdbcTemplate.execute(SQL_CREATE_INSERT_STORED_PROCEDURE_WAGONS, new PreparedStatementCallback<Object>() {
			@Override
			public Object doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
				ps.execute();
				return null;
			}
		});
		
		this.jdbcTemplate.execute(SQL_CREATE_INSERT_STORED_PROCEDURE_REGISTER, new PreparedStatementCallback<Object>() {
			@Override
			public Object doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
				ps.execute();
				return null;
			}
		});
	}
	
	//*************************************
	//Logic of interaction with the wagons table
	@Override
	public Optional<DataElementWagons> getDataElementWagonsByNumber(int numberWagon){
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_WAGON, numberWagon);
		try {
			return Optional.ofNullable(
					jdbcTemplate.queryForObject(
							SQL_GET_DATA_BY_NUMBER_WAGONS, 
							params, 
							dataMapperWagons)
					);
		}catch(Exception e) {
			return Optional.empty();
		}
	}
	
	@Override
	public List<Optional<DataElementWagons>> getDataElementWagonsAll(){
		List<DataElementWagons> wagons = jdbcTemplate.query(SQL_SELECT_WAGONS, dataMapperWagons);
		
		return wagons.stream()
				.map(Optional::ofNullable)
				.collect(Collectors.toList());
	}

	@Override
	public void insertDataElementWagons(int numberWagon, String arrivalDate, String imagePath, double levelCorrectRecognize) {
		SimpleJdbcCall jdbcCall = new
				SimpleJdbcCall(this.dataSource).withProcedureName(NAME_STORED_PROCEDURE_INSERT_WAGONS);
		
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_WAGON, numberWagon);
		params.addValue(NAME_ATTRIBUT_ARRIVAL_DATE, arrivalDate);
		params.addValue(NAME_ATTRIBUT_IMAGE_PATH, imagePath);
		params.addValue(NAME_ATTRIBUT_LEVEL_CORRECT, levelCorrectRecognize);
		SqlParameterSource in = params;
		
		Map<String, Object> out = jdbcCall.execute(in);
		
		if(((Integer)out.get(NAME_ATTRIBUT_OUT_FOR_WAGONS)).intValue() < 0)
			new Exception("Error! Number wagon not exists in the table register!");
		/*jdbcTemplate.update(SQL_INSERT_DATA_WAGONS, params);*/
		
	}
	
	@Override
	public void updateDataElementWagons(int numberWagon, String arrivalDate, String imagePath,
			double levelCorrectRecognize) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_WAGON, numberWagon);
		params.addValue(NAME_ATTRIBUT_ARRIVAL_DATE, arrivalDate);
		params.addValue(NAME_ATTRIBUT_IMAGE_PATH, imagePath);
		params.addValue(NAME_ATTRIBUT_LEVEL_CORRECT, levelCorrectRecognize);
		jdbcTemplate.update(SQL_UPDATE_TABLE_WAGONS, params);
	}
	
	@Override
	public void deleteDataElementWagons(int numberWagon) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_WAGON, numberWagon);
		jdbcTemplate.update(SQL_DELETE_RECORD_WAGONS, params);
	}
	
	//*************************************
	//Logic of interaction with the invoices table
	@Override
	public Optional<DataElementInvoices> getDataElementInvoicesByNumber(String numberInvoices){
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_INVOICES, numberInvoices);
		try {
			return Optional.ofNullable(
					jdbcTemplate.queryForObject(
							SQL_GET_DATA_BY_NUMBER_INVOICES, 
							params, 
							dataMapperInvoices)
					);
		}catch(Exception e) {
			return Optional.empty();
		}
	}
	
	@Override
	public List<Optional<DataElementInvoices>> getDataElementInvoicesAll() {
		List<DataElementInvoices> invoices = jdbcTemplate.query(SQL_SELECT_INVOICES, dataMapperInvoices);
		
		return invoices.stream()
				.map(Optional::ofNullable)
				.collect(Collectors.toList());
	}
	
	@Override
	public void insertDataElementInvoices(String numberInvoice, String nameSupplier, short totalWagons, 
			String arrivalTrainDate, String departureTrainDate) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_INVOICES, numberInvoice);
		params.addValue(NAME_ATTRIBUT_NAME_SUPPLIER, nameSupplier);
		params.addValue(NAME_ATTRIBUT_TOTAL_WAGONS, totalWagons);
		params.addValue(NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE, arrivalTrainDate);
		params.addValue(NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE, departureTrainDate);
		jdbcTemplate.update(SQL_INSERT_DATA_INVOICES, params);
	}

	@Override
	public void updateDataElementInvoices(String numberInvoice, String nameSupplier, short totalWagons,
			String arrivalTrainDate, String departureTrainDate) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_INVOICES, numberInvoice);
		params.addValue(NAME_ATTRIBUT_NAME_SUPPLIER, nameSupplier);
		params.addValue(NAME_ATTRIBUT_TOTAL_WAGONS, totalWagons);
		params.addValue(NAME_ATTRIBUT_ARRIVAL_TRAIN_DATE, arrivalTrainDate);
		params.addValue(NAME_ATTRIBUT_DEPARTURE_TRAIN_DATE, departureTrainDate);
		jdbcTemplate.update(SQL_UPDATE_TABLE_INVOICES, params);
	}

	@Override
	public void deleteDataElementInvoices(String numberInvoice) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_NUMBER_INVOICES, numberInvoice);
		jdbcTemplate.update(SQL_DELETE_RECORD_INVOICES, params);
	}

	//*************************************
	//Logic of interaction with the register table
	
	@Override
	public Optional<DataElementRegister> getDataElementRegisterById(String fkNumberInvoice, int numberWagon) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_REF_NUMBER_INVOICE, fkNumberInvoice);
		params.addValue(NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON, numberWagon);
		try {
			return Optional.ofNullable(
					jdbcTemplate.queryForObject(
							SQL_GET_DATA_BY_ID_REGISTER, 
							params, 
							dataMapperRegister)
					);
		}catch(Exception e) {
			return Optional.empty();
		}
	}

	@Override
	public List<Optional<DataElementRegister>> getDataElementRegisterAll() {
		List<DataElementRegister> registers = jdbcTemplate.query(SQL_SELECT_REGISTER, dataMapperRegister);
		
		return registers.stream()
				.map(Optional::ofNullable)
				.collect(Collectors.toList());
	}

	@Override
	public void insertDataElementRegister(String fkNumberInvoice, int numberWagon, short serialNumber, float sD) {
		SimpleJdbcCall jdbcCall = new
				SimpleJdbcCall(this.dataSource).withProcedureName(NAME_STORED_PROCEDURE_INSERT_REGISTER);

		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_REF_NUMBER_INVOICE, fkNumberInvoice);
		params.addValue(NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON, numberWagon);
		params.addValue(NAME_ATTRIBUT_SERIAL_NUMBER, serialNumber);
		params.addValue(NAME_ATTRIBUT_SD, sD);
		SqlParameterSource in = params;
		
		Map<String, Object> out = jdbcCall.execute(in);
		
		if(((Integer)out.get(NAME_ATTRIBUT_OUT_FOR_REGISTER)).intValue() < 0)
			new Exception("Error! Number wagon not exists in the table register!");
		
	}

	@Override
	public void updateDataElementRegister(String fkNumberInvoice, int numberWagon, boolean arrivalMark,
			short serialNumber, short actualSerialNumber, float sD) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteDataElementRegister(String fkNumberInvoice, int numberWagon) {
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue(NAME_ATTRIBUT_REF_NUMBER_INVOICE, fkNumberInvoice);
		params.addValue(NAME_ATTRIBUT_FOR_THIS_NUMBER_WAGON, numberWagon);
		jdbcTemplate.update(SQL_DELETE_RECORD_REGISTER, params);
	}
}
